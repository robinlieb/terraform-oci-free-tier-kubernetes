#cloud-config

package_update: true
package_upgrade: true

apt:
  preserve_sources_list: false
  add_apt_repo_match: ^[\w-]+:\w
  sources:
    kubernetes.list:
      source: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
      keyid: 7EA0A9C3F273FCD8
    docker.list:
      source: "deb [arch=arm64] https://download.docker.com/linux/ubuntu jammy stable"
      keyid: B53DC80D13EDEF05

packages:
  - curl
  - apt-transport-https
  - vim
  - git
  - gnupg2
  - software-properties-common
  - ca-certificates
  - uidmap
  - jq
  - containerd.io
  - kubeadm
  - kubelet
  - kubectl

write_files:
  - path: /etc/sysctl.d/kubernetes.conf
    owner: root:root
    permission: 0600
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      %{if node == 0 }
  - path: /etc/kubeadm-config.yaml
    owner: root:root
    permission: 0600
    content: |
      apiVersion: kubeadm.k8s.io/v1beta3
      kind: ClusterConfiguration
      controlPlaneEndpoint: "cp:6443"
      apiServer:
        certSANs:
        - PUBLIC_IP
      networking:
        podSubnet: 10.244.0.0/16
      controllerManager:
        extraArgs:
          cloud-provider: external
      ---
      apiVersion: kubeadm.k8s.io/v1beta3
      kind: InitConfiguration
      localAPIEndpoint:
        advertiseAddress: "10.0.0.10"
        bindPort: 6443
      ---
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      cgroupDriver: systemd
  - path: /etc/kubernetes/pki/ca.crt
    permission: 0600
    content: |
      ${indent(6, ca_pem)}
  - path: /etc/kubernetes/pki/ca.key
    permission: 0600
    content: |
      ${indent(6, ca_key)}
      %{ endif }

runcmd:
  - swapoff -a
  - sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
  - modprobe overlay
  - modprobe br_netfilter
  - sysctl --system
  - apt-mark hold kubelet kubeadm kubectl
  - iptables --flush
  - netfilter-persistent save
  - containerd config default > /etc/containerd/config.toml
  - sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
  - systemctl restart containerd
    %{if node == 0 }
  - echo "10.0.0.10 cp" >> /etc/hosts
  - echo "10.0.0.11 worker1" >> /etc/hosts
  - echo "10.0.0.12 worker2" >> /etc/hosts
  - echo "10.0.0.13 worker3" >> /etc/hosts
  - public_ip=$(curl ifconfig.io)
  - sed -i "s/PUBLIC_IP/$public_ip/g" /etc/kubeadm-config.yaml
  - kubeadm init --config=/etc/kubeadm-config.yaml --upload-certs --ignore-preflight-errors=NumCPU
  - export KUBECONFIG=/etc/kubernetes/admin.conf
  - mkdir -p /home/ubuntu/.kube
  - cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
  - chown $(id -u ubuntu):$(id -g ubuntu) /home/ubuntu/.kube/config
  - kubeadm token create ${token}
  - kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  - kubectl create secret generic oci-cloud-controller-manager -n kube-system --from-file=cloud-provider.yaml=/tmp/provider-config-template.yaml
  - kubectl apply -f https://github.com/oracle/oci-cloud-controller-manager/releases/latest/download/oci-cloud-controller-manager-rbac.yaml
  - kubectl apply -f https://github.com/oracle/oci-cloud-controller-manager/releases/latest/download/oci-cloud-controller-manager.yaml
  - until kubectl get nodes | grep -w node3 | grep -q Ready; do sleep 1; done && kubectl label node node3 nginx-ingress=true
    %{ else }
  - echo "10.0.0.10 cp" >> /etc/hosts
  - kubeadm join --token ${token} --discovery-token-unsafe-skip-ca-verification cp:6443
    %{ endif }
